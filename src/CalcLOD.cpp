#include "CalcLOD.h"

#include "Debug.h"
#include "PLYReader.h"
#include "TriangleMesh.h"

#include <tinyply.h>
using namespace tinyply;

void write_ply_example(const std::string &filename) {
  geometry cube = make_cube_geometry();

  std::filebuf fb_binary;
  fb_binary.open(filename + "-binary.ply", std::ios::out | std::ios::binary);
  std::ostream outstream_binary(&fb_binary);
  if (outstream_binary.fail())
    throw std::runtime_error("failed to open " + filename);

  std::filebuf fb_ascii;
  fb_ascii.open(filename + "-ascii.ply", std::ios::out);
  std::ostream outstream_ascii(&fb_ascii);
  if (outstream_ascii.fail())
    throw std::runtime_error("failed to open " + filename);

  PlyFile cube_file;

  cube_file.add_properties_to_element(
      "vertex", {"x", "y", "z"}, Type::FLOAT32, cube.vertices.size(),
      reinterpret_cast<uint8_t *>(cube.vertices.data()), Type::INVALID, 0);

  cube_file.add_properties_to_element(
      "vertex", {"nx", "ny", "nz"}, Type::FLOAT32, cube.normals.size(),
      reinterpret_cast<uint8_t *>(cube.normals.data()), Type::INVALID, 0);

  cube_file.add_properties_to_element(
      "vertex", {"u", "v"}, Type::FLOAT32, cube.texcoords.size(),
      reinterpret_cast<uint8_t *>(cube.texcoords.data()), Type::INVALID, 0);

  cube_file.add_properties_to_element(
      "face", {"vertex_indices"}, Type::UINT32, cube.triangles.size(),
      reinterpret_cast<uint8_t *>(cube.triangles.data()), Type::UINT8, 3);

  cube_file.get_comments().push_back("generated by tinyply 2.3");

  // Write an ASCII file
  cube_file.write(outstream_ascii, false);

  // Write a binary file
  cube_file.write(outstream_binary, true);
}

CalcLOD::CalcLOD(int argc, char **argv) {
  TriangleMesh *mesh = new TriangleMesh();
  bool bSuccess = PLYReader::readMesh(std::string(argv[1]), *mesh);
  Octree octree(mesh->getVertices());
}
